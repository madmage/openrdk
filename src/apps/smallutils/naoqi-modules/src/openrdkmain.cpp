/// <summary>
/// This is an autogenerated project, this description needs to be updated.
/// </summary>
/// <remarks> Copyright 2010 OpenRDK Developers </remarks>


#include <signal.h>
#include <alptr.h>
#include <albroker.h>
#include <almodule.h>
#include <albrokermanager.h>
#include <altoolsmain.h>

// include the modules
#include "raudioserver.h"
#include "rledsserver.h"
#include "rsensorsserver.h"
//#include "rvisionserver.h"

#ifndef OPENRDK_IS_REMOTE

#ifdef _WIN32
#define ALCALL __declspec(dllexport)
#else
#define ALCALL
#endif
#endif

#ifdef __cplusplus
extern "C"
{
#endif

	ALCALL int _createModule( AL::ALPtr<AL::ALBroker> pBroker )
	{
		// init broker with the main broker instance
		// from the parent executable
		AL::ALBrokerManager::setInstance(pBroker->fBrokerManager.lock());
		AL::ALBrokerManager::getInstance()->addBroker(pBroker);

		// create module instances
		AL::ALModule::createModule<RAudioServer>(pBroker,"RAudioServer" );
		AL::ALModule::createModule<RLedsServer>(pBroker,"RLedsServer" );
		AL::ALModule::createModule<RSensorsServer>(pBroker,"RSensorsServer" );
		/// The Vision server is disabled since we combine the two shm for sensors and images
		//AL::ALModule::createModule<RVisionServer>(pBroker,"RVisionServer" );
		return 0;
	}

	ALCALL int _closeModule(  )
	{
		return 0;
	}

# ifdef __cplusplus
}
# endif


#ifdef OPENRDK_IS_REMOTE

int main(int argc, char *argv[] )
{
	// pointer to createModule
	TMainType sig;
	sig = &_createModule;

	// call main
	ALTools::mainFunction("OpenRDK",argc, argv,sig);
}

#endif

