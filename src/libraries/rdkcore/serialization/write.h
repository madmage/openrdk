/*
 *    OpenRDK : OpenSource Robot Development Kit
 *    Copyright (C) 2007, 2008  Daniele Calisi, Andrea Censi (<first_name>.<last_name>@dis.uniroma1.it)
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef H_WRITE
#define H_WRITE

#include <string>

#include "utils.h"
#include <rdkcore/exceptions/exceptions.h>

namespace RDK2 { namespace Serialization {
 
	class Writer;
	
	class Writable {
		public:
		/** 
		* Function to be implemented by objects wishing to serialize themselves.
		*
		* Here are some assumptions:
		* - the object must call startWriting(), then output his data with the writeXXX functions, 
		*   and then end with endWriting()
		* - the object must let the exceptions generated by the Writer to pass through, as the writer
		*   will take care of them.
		* - to serialize a sub-object, use the writeObject function.
		*/
		virtual void write(Writer*) const throw(WritingException)  = 0 ;
		virtual ~Writable() {}
	};
	
	class Writer {
		public:
		
			/** Serializes the object to a string. */
			virtual std::string serialize(bool withClassName, const Writable*w) = 0;
			virtual ~Writer() { }
		public:
		
		virtual void startWriting(cstr className, unsigned char version = 1) throw (WritingException) = 0;
			/** Occhio alle conversioni automatiche quando chiamate una di queste due */
			virtual void write_u8 (  uint8_t, cstr name="") throw(WritingException) =0;
			virtual void write_i8 (   int8_t, cstr name="") throw(WritingException) =0;
			virtual void write_i16(  int16_t, cstr name="") throw(WritingException) =0;
			virtual void write_i32(  int32_t, cstr name="") throw(WritingException) =0;
			virtual void write_f32(float32_t, cstr name="") throw(WritingException) =0;
			virtual void write_f64(float64_t, cstr name="") throw(WritingException) =0;
			
			virtual void write_u8   (const   uint8_t*, size_t n, cstr name="") throw(WritingException) =0;
			virtual void write_i8   (const    int8_t*, size_t n, cstr name="") throw(WritingException) =0;
			virtual void write_i16  (const   int16_t*, size_t n, cstr name="") throw(WritingException) =0;
			virtual void write_i32  (const   int32_t*, size_t n, cstr name="") throw(WritingException) =0;
			virtual void write_f32  (const float32_t*, size_t n, cstr name="") throw(WritingException) =0;
			virtual void write_f64  (const float64_t*, size_t n, cstr name="") throw(WritingException) =0;

			/// Scrittura di buffer
			virtual void writeBytes (const      void*, size_t n, cstr name="") throw(WritingException) =0;

			/** stringa tranquilla: */
			virtual void writeString(cstr s, cstr name="") throw(WritingException) =0;
			
			/// Scrittura di oggetti
			virtual void writeObject(bool needClassName, const Writable*w, cstr name="")
				throw(WritingException) = 0;
				
		virtual void doneWriting() throw(WritingException) = 0;
	};
	
}} // namespace RDK2::Serialization


namespace RDK2 {
	using Serialization::Writer;
}

#endif
